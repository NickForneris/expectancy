{"version":3,"sources":["App.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","exp","setExp","_useState3","_useState4","chanceProfit","setChanceProfit","_useState5","_useState6","maxRisk","setMaxRisk","_useState7","_useState8","maxReward","setMaxReward","_useState9","_useState10","rateReturn","setRateReturn","useEffect","isNaN","react_default","a","createElement","className","class","type","aria-label","aria-describedby","onChange","e","parseInt","target","value","parseFloat","onClick","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.370a12f7.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\n\nfunction App() {\n\n  const [exp, setExp] = useState()\n  const [chanceProfit, setChanceProfit] = useState()\n  const [maxRisk, setMaxRisk] = useState()\n  const [maxReward, setMaxReward] = useState(0)\n  const [rateReturn, setRateReturn] = useState()\n\n  const handleClick = () => {\n    setExp(exp)\n    setChanceProfit(chanceProfit)\n    setMaxRisk(maxRisk)\n    setMaxReward(parseInt((exp + ((1 - chanceProfit) * maxRisk)) / chanceProfit))\n  }\n\n  useEffect(() => {\n    if (isNaN(rateReturn)) {\n      setRateReturn(0)\n    } else {\n      setRateReturn((maxReward / maxRisk) * 100)\n    }\n    // eslint-disable-next-line\n  }, [maxReward])\n\n  return (\n    <div className=\"text-center\">\n\n      <h1>Decision Checks For Expectancy</h1>\n      <p>Without formulas, we need to utilize some workarounds to do certain things in the system.<br></br>\n        This is my attempt to use our current options to trade opportunities for expectancy. <br></br>\n        The following decisions are needed:\n      </p>\n\n      <ul className=\"list-unstyled\">\n        <li><strong>Necessary Rate of Return</strong></li>\n        <li><strong>Opportunity chance of Profit</strong></li>\n      </ul>\n\n      <p>Input your desired expectancy per trade. Determine your criteria for Chance of Profit.<br></br>\n      Enter some arbitrary number for Max Risk (this is just an input to show the Necessary Rate of Return<br></br>\n      is soley dependant on Chance of Profit)\n      </p>\n      <p><strong>*Please Note:</strong> I assuming every trade ends up at Max Profit or Max Loss</p>\n\n      <div className=\"container-fluid\">\n        <div class=\"row justify-content-center\">\n          <div className=\"col-auto\">\n            <div class=\"table-responsive p-2\">\n              <table className=\"table table-sm\">\n\n                <tr>\n                  <td className=\"pb-1\">Desired Expectancy ($/trade)</td>\n                  <td className=\"pb-1\"><input type=\"text\" className=\"form-control\" aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" onChange={e => setExp(parseInt(e.target.value))}></input></td>\n                </tr>\n\n                <tr>\n                  <td className=\"pb-1\">Opportunity Chance of Profit (%)</td>\n                  <td className=\"pb-1\"><input type=\"text\" className=\"form-control\" aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" onChange={e => setChanceProfit(parseFloat(e.target.value) / 100)}></input></td>\n                </tr>\n\n                <tr>\n                  <td className=\"pb-1\">Opportunity Max Risk ($)</td>\n                  <td className=\"pb-1\"><input type=\"text\" className=\"form-control\" aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" onChange={e => setMaxRisk(parseInt(e.target.value))}></input></td>\n                </tr>\n\n                <tr>\n                  <td className=\"pb-1\">Opportunity Max Reward ($)</td>\n                  <td className=\"pb-1\">{maxReward}</td>\n                </tr>\n\n                <tr>\n                  <td className=\"pb-1\">Necessary Rate of Return (%)</td>\n                  <td className=\"pb-1\">{rateReturn}</td>\n                </tr>\n\n                <tr>\n                  <td></td>\n                  <td><button type=\"button\" className=\"btn btn-outline-dark btn-sm\" onClick={handleClick}>CALCULATE</button></td>\n                </tr>\n\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div>\n      Formulas:<br></br>\n        <code>\n          Max Reward = (Desired Expectancy + ((1 - Chance of Profit) * Max Risk)) / Chance of Profit\n        </code>\n        </div>\n        <div>\n        <code>\n        Necessary Rate of Return = Max Reward / Max Risk\n        </code>\n        </div>\n\n      </div>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n// Bootstrap CSS\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n// Bootstrap Bundle JS\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}